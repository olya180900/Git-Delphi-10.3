#include <iostream>
#include <omp.h>
#include <cstdlib>
#include <ctime>

int main() {
    const int N = 100; 
    double A[N][N];
    double B[N];
    double X[N] = {0}; 

    // Заполнение матрицы случайными значениями
    srand(time(NULL));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            A[i][j] = (rand() % 100) / 10.0;
        }
        B[i] = (rand() % 100) / 10.0;
    }

    // Прямой ход метода Гаусса
    for (int k = 0; k < N - 1; ++k) {
        #pragma omp parallel for
        for (int i = k + 1; i < N; ++i) {
            double coeff = A[i][k] / A[k][k];
            for (int j = k; j < N; ++j) {
                A[i][j] -= coeff * A[k][j];
            }
            B[i] -= coeff * B[k];
        }
    }

    // Обратный ход метода Гаусса
    X[N - 1] = B[N - 1] / A[N - 1][N - 1];
    for (int i = N - 2; i >= 0; --i) {
        double sum = 0;
        #pragma omp parallel for reduction(+:sum)
        for (int j = i + 1; j < N; ++j) {
            sum += A[i][j] * X[j];
        }
        X[i] = (B[i] - sum) / A[i][i];
    }

    std::cout << "Решение: ";
    for (int i = 0; i < N; ++i) {
        std::cout << X[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}